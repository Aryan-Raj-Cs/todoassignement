{"version":3,"sources":["logo.svg","reducers/Usereducers.js","components/CreateNote.js","components/Notes.js","components/AllNotes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","reducer","state","action","type","payload","CreateNote","props","useContext","userContext","dispatch","obj","text","useState","note","setNote","className","placeholder","name","onChange","e","event","target","value","prev","Date","itemEvent","Button","onClick","length","console","log","undefined","JSON","parse","localStorage","getItem","push","setItem","stringify","arr","change","style","float","clear","window","location","reload","Notes","count","setCount","date","newstate","map","val","completed","completedtime","now","complete","split","startsWith","href","data","showhastag","display","margin","toString","substring","color","AllNote","setChange","match","setMatch","show","setShow","changefun","includes","uncom","reverse","uncompleted","com1","filter","sort","a","b","com","createContext","App","setChang","useReducer","Provider","AllNotes","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5aec142.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const initialState = []\r\n\r\nexport const reducer = (state,action)=>{\r\n    if(action.type==\"USER\"){\r\n        return action.payload\r\n    }\r\n    if(action.type==\"CLEAR\"){\r\n        return null\r\n    }\r\n    if(action.type==\"ADD\"){\r\n        return [\r\n            ...state,\r\n            action.payload\r\n        ]\r\n    }\r\n    if(action.type==\"FIRST\"){\r\n        return [\r\n            ...state,\r\n            ...action.payload\r\n        ]\r\n    }\r\n    if(action.type==\"UPDATE\"){\r\n        return [\r\n            ...action.payload\r\n           \r\n        ]\r\n    }\r\n    return state\r\n}","import React, { useState ,useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveCircle from '@material-ui/icons/RemoveCircle';\r\nimport {userContext} from '../App'\r\nimport { DesktopWindows } from '@material-ui/icons';\r\n\r\n\r\nconst CreateNote = (props) => {\r\n\r\n    const { state, dispatch } = useContext(userContext);\r\n    \r\n    \r\n\r\n    const obj = {\r\n        \r\n        text: \"\"\r\n    }\r\n    const [note, setNote] = useState(obj);\r\n\r\n    const itemEvent = (event) => {\r\n        const { name, value } = event.target;\r\n        setNote((prev) => {\r\n            \r\n            return {\r\n               \r\n                [name]: value,\r\n                date: new Date(),\r\n                completed:false\r\n            }\r\n\r\n        });\r\n\r\n\r\n    };\r\n\r\n    const setIteam = () => {\r\n       \r\n        // console.log(note)\r\n        // console.log(state)\r\n        \r\n        setNote(obj)\r\n  if(note.text!=\"\"){\r\n    if(state.length==0){\r\n        console.log(\"zero hai beta\")\r\n        if(JSON.parse(localStorage.getItem(\"notes\"))==undefined){\r\n            dispatch({ type: \"ADD\", payload: note })\r\n            let arr=state;\r\n            arr.push(note)\r\n            localStorage.setItem(\"notes\",JSON.stringify(state))\r\n        }\r\n        else{\r\n        let arr=JSON.parse(localStorage.getItem(\"notes\"))\r\n        arr.push(note)\r\n        console.log(arr)\r\n        localStorage.setItem(\"notes\",JSON.stringify(arr))\r\n        dispatch({ type: \"UPDATE\", payload: arr })\r\n        //localStorage.setItem(\"notes\",JSON.stringify(newstate))\r\n        props.change()\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"pata nhi\")\r\n     dispatch({ type: \"ADD\", payload: note })\r\n     let arr=state;\r\n     arr.push(note)\r\n     localStorage.setItem(\"notes\",JSON.stringify(state))\r\n    }\r\n    }\r\n    }\r\n   const clear=()=>{\r\n       localStorage.clear(\"notes\")\r\n       window.location.reload();\r\n   }\r\n    return (\r\n        <>\r\n            <div className=\"mainflex\">\r\n            <div className=\"main\">\r\n\r\n                {/* <input type=\"text\" placeholder=\"#hash_tag\" name=\"title\" autoComplete=\"off\"  /> */}\r\n                <textarea placeholder=\"Write A Note\" name=\"text\" onChange={(e) => { itemEvent(e) }} value={note.text} />\r\n                <Button onClick={setIteam}><AddIcon /></Button>\r\n                <Button style={{float:\"right\"}}  onClick={clear}>< RemoveCircle /></Button>\r\n               \r\n\r\n\r\n            </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateNote;\r\n","import React, { useState ,useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircle from '@material-ui/icons/CheckCircle';\r\nimport {userContext} from '../App'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nconst Notes = (props) => {\r\n    const [count,setCount]=useState(0)\r\n    //console.log(props.obj)\r\n    const { state, dispatch } = useContext(userContext);\r\n    const complete =(date)=>{\r\n        let newstate=[]\r\n        if(state.length!=0){\r\n        newstate = state.map(val=>{\r\n           if(val.date==date && !val.completed){\r\n               val.completed=true;\r\n               val.completedtime=Date.now();\r\n               \r\n           }\r\n           return val;\r\n       })\r\n\r\n    }\r\n    else{\r\n         newstate = JSON.parse(localStorage.getItem(\"notes\")).map(val=>{\r\n            if(val.date==date && !val.completed){\r\n                val.completed=true;\r\n                val.completedtime=Date.now();\r\n                \r\n            }\r\n            return val;\r\n        })\r\n  \r\n    }\r\n\r\n\r\n\r\n       \r\n       dispatch({ type: \"UPDATE\", payload: newstate })\r\n       localStorage.setItem(\"notes\",JSON.stringify(newstate))\r\n       setCount(count+1)\r\n       \r\n      \r\n       props.change()\r\n    }\r\n\r\n    const search=(e,data)=>{\r\n       // e.stopPropagation();\r\n       // console.log(data)\r\n        props.showhastag(data)\r\n       \r\n    }\r\n    const hashtag=()=>{\r\n\r\n       let arr=props.obj.text.split(\" \");\r\n       let allhastag=arr.map(val=>{\r\n\r\n        if(val.startsWith(\"#\"))\r\n         return <a href=\"#\"  onClick={(e)=>{search(e,val)}} >{val+\" \"}</a>\r\n\r\n\r\n         else{\r\n            return val+\" \";\r\n         }\r\n        })\r\n        return allhastag\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"notes\" \r\n            \r\n            onClick={()=>{complete(props.obj.date)}}\r\n            >\r\n\r\n                \r\n                {/* <textarea placeholder=\"Write A Note\" name=\"text\"  value={props.obj.text} /> */}\r\n                <p>{hashtag()}</p>\r\n                {/* <p>{props.obj.text}</p> */}\r\n                <div style={{display:\"flex\"}}>\r\n                    <div style={{margin:\"10px\"}}>\r\n                <span><strong>{props.obj.date.toString().substring(8,18)}</strong></span>\r\n                    </div>\r\n                    {props.obj.completed ? <>\r\n                        <div style={{ margin: \"10px\" }}><strong>Completed</strong>  </div>\r\n                        <div style={{ margin: \"10px\" }}>\r\n                            <CheckCircle style={{ color: \"green\" }} />\r\n                        </div>\r\n                    </> :\r\n                        <>\r\n                            <div style={{ margin: \"10px\" }}><strong>InProgress</strong>  </div>\r\n                            <div style={{ margin: \"10px\" }}>\r\n                                <CheckCircle style={{ color: \"yellow\" }} />\r\n                            </div>\r\n                        </>\r\n\r\n\r\n                    }\r\n                 </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useState ,useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Notes from './Notes'\r\nimport {userContext} from '../App'\r\n\r\n\r\nconst AllNote = () => {\r\n    \r\n    const { state, dispatch } = useContext(userContext);\r\n    const [change,setChange]=useState(false)\r\n    const [tags,setTags]=useState([])\r\n    const [append,setAppend]=useState([])\r\n    const [match,setMatch]=useState(\"\")\r\n    const [show,setShow]=useState(false)\r\n    const changefun=()=>{\r\n        if(change){\r\n            setChange(false)\r\n           \r\n        }\r\n        else{\r\n            setChange(true)  \r\n            \r\n        }\r\n    \r\n    }\r\n    const completed=()=>{\r\n        \r\n    //   console.log(com.length)\r\n\r\n    let com1=[];\r\n\r\n    if(JSON.parse(localStorage.getItem(\"notes\"))==undefined){\r\n          com1=state.filter(val=>{\r\n            if(val.completed){\r\n                return true\r\n            }\r\n            else{\r\n               return  false\r\n            }\r\n           \r\n         \r\n        })\r\n    }\r\n    else{\r\n\r\n    \r\n          com1=JSON.parse(localStorage.getItem(\"notes\")).filter(val=>{\r\n            // com1=state.filter(val=>{\r\n           if(val.completed){\r\n               return true\r\n           }\r\n           else{\r\n              return  false\r\n           }\r\n          \r\n        \r\n       })\r\n    }\r\n      // console.log(com1)\r\n\r\n       com1.sort(function(a,b){\r\n      \r\n        if((a.completedtime)>(b.completedtime)){\r\n          return  1\r\n        }\r\n        else{\r\n          return -1\r\n        }\r\n      \r\n        \r\n      })\r\n\r\n      let com=[];\r\n      if(com1.length>0)\r\n      com=com1.map(val=>{\r\n       if(val.completed){\r\n           return <Notes obj={val} change={changefun} showhastag={showhastag}/>\r\n       }\r\n      \r\n    \r\n   })\r\n       return com.reverse();\r\n    }\r\n    const uncompleted=()=>{\r\n        let uncom=[]\r\n         if(state.length>0){\r\n           // let uncom=JSON.parse(localStorage.getItem(\"notes\")).map(val=>{\r\n                  uncom=state.map(val=>{\r\n                if(!val.completed){\r\n                    return <Notes obj={val} change={changefun} showhastag={showhastag}/>\r\n                }\r\n     \r\n                \r\n            })\r\n     \r\n         }\r\n\r\n         else{\r\n             if(JSON.parse(localStorage.getItem(\"notes\"))==undefined){\r\n                         let uncom=state.map(val=>{\r\n                    if(!val.completed){\r\n                        return <Notes obj={val} change={changefun} showhastag={showhastag}/>\r\n                    }\r\n         \r\n                    \r\n                })\r\n                \r\n             }\r\n\r\n             else{\r\n\r\n             \r\n                uncom=JSON.parse(localStorage.getItem(\"notes\")).map(val=>{\r\n                //let uncom=state.map(val=>{\r\n                    if(!val.completed){\r\n                        return <Notes obj={val} change={changefun} showhastag={showhastag}/>\r\n                    }\r\n         \r\n                    \r\n                })\r\n            }\r\n         }\r\n          \r\n       return uncom.reverse();\r\n    }\r\n  \r\n    const showhastag=(data)=>{\r\n    console.log(data)\r\n     setShow(true)\r\n     setMatch(data)\r\n     \r\n     \r\n\r\n    }\r\n    const showtag=(data)=>{\r\n        console.log(data)\r\n        \r\n        const arr=state.map(val=>{\r\n      if(val.text.includes(data))\r\n       return <Notes obj={val} change={changefun}  showhastag={showhastag} />\r\n       console.log(val.text.includes(data))\r\n        })\r\n        // setTags([...tags,...arr])\r\n          return arr;  \r\n    \r\n    \r\n        }\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n\r\n        <div className=\"mainflex\">\r\n       {show ?\r\n       <>\r\n       {showtag(match)}\r\n       \r\n       </>:\r\n    \r\n       <>\r\n        {uncompleted()}\r\n        {completed()}\r\n        </>\r\n    }\r\n        </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AllNote;\r\n","import React,{createContext,useContext,useReducer, useState} from 'react';\nimport { reducer, initialState } from  './reducers/Usereducers'\nimport logo from './logo.svg';\nimport './App.css';\nimport Create from './components/CreateNote'\nimport AllNotes from './components/AllNotes'\nexport const userContext = createContext();\n\nfunction App() {\nconst [chang,setChang]=useState(false)\nconst change=()=>{\n  if(chang==false){\n    setChang(true)\n  }\n  else{\n    setChang(true)\n  }\n}\n\n\n  \n  const [state, dispatch] = useReducer(reducer, initialState);\n  \n  return (\n\n    <userContext.Provider value={{state,dispatch}}>\n     \n      <Create change={change}/>\n      <AllNotes/>\n      \n    \n\n    </userContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}